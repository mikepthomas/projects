{"pageProps":{"post":{"slug":"printer-klipper-firmware","related":["/projects/printer-voron-0.2","/projects/printer-voron-1.8","/projects/printer-voron-2.4","/projects/printer-am8","/projects/single-board-computers"],"external":["https://www.klipper3d.org/"],"title":"Klipper Firmware","heading":"Configuring the software to run a 3D Printer","date":"2025-08-29T22:45:11.067Z","preview":"/assets/blog/printer-klipper-firmware/klipper-firmware-hero.jpg","author":{"name":"Mike Thomas","picture":"/assets/authors/mike.jpg"},"description":"Configuring MainsailOS with all the software to run Klipper on my 3D Printer.","tags":["Raspberry Pi"],"categories":[],"keywords":["Klipper"],"promoted":false,"content":"\n# Table of contents\n\n# MainsailOS\n\nAs Mainsail is my Klipper UI of choice I use [MainsailOS 2.1.0](https://docs-os.mainsail.xyz/) for my printers as many of the tools come installed by default.\n\n# Update APT Repositories\n\nOne of the first things I do when setting up a new machine is to update apt to use the [Nexus repository](thinkcenter#sonatype-nexus-repository) to avoid downloading updates multiple times over the internet.\n\n```sh\nsudo nano /etc/apt/auth.conf.d/nexus.mikethomas.info.conf\nsudo nano /etc/apt/sources.list\nsudo nano /etc/apt/sources.list.d/raspi.list\n```\n\n# Klipper MOTD\n\nThis adds a nice splash screen to the console that is really useful when logging into the printer via SSH.\n\n```sh\ngit clone https://www.github.com/tomaski/klipper-motd.git\nchmod +x ./klipper-motd/setup.sh\nsudo ./klipper-motd/setup.sh --install\n```\n\n1. Enter `Y` to add update check to dashboard\n\n```sh\nsudo motd-config\n```\n\n2. Select `OS Flavor` (Option 1)\n3. Select theme you would like to use\n\n# Kiauh\n\nKiauh stands for \"Klipper Installation And Update Helper\" it is a set of scripts making it easier to set up the tools required for Klipper.\n\n```sh\ngit clone https://github.com/dw-0/kiauh.git\n./kiauh/kiauh.sh\n```\n\n## Install KlipperScreen\n\n1. Select `Install` (Option 1)\n2. Select `KlipperScreen` (Option 5)\n3. Press Enter to install as service (Default)\n4. Press Enter to use Xserver (Default)\n5. Press Enter to install NetworkManager (Default)\n\n## Install PrettyGCode\n\n1. Select `Install` (Option 1)\n2. Select `PrettyGCode` (Option 7)\n3. Press Enter to use port 7136 (Default)\n\n# LDO Installer\n\nThe LDO Installer sets up the printer configurations specifically for LDO Motors printer kits. It also has a nice option to create a splash screen for KlipperScreen whilst the printer is booting up.\n\n```sh\ngit clone https://github.com/MotorDynamicsLab/LDOInstaller.git\n./LDOInstaller/LDOInstaller.sh\n```\n\n1. Select LDO Kit you have\n2. Select printer size you have\n3. Select `Splash Screen` (Option 7)\n4. Select `Install` (Option 1)\n\n# CandleLight Firmware\n\nCandleLight Firmware is used for many boards connect the USB port of Raspberry Pi to CAN bus for 3D printing boards such as the [BigTreeTech U2C](https://github.com/bigtreetech/U2C).\n\n```sh\ngit clone https://github.com/candle-usb/candleLight_fw\ncd ~/candleLight_fw/\nsudo apt install gcc-arm-none-eabi\nmkdir build\ncd build\ncmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/gcc-arm-none-eabi-8-2019-q3-update.cmake\nmake candleLight_fw -j4\nsudo dfu-util -a 0 -D ./candleLight_fw.bin --dfuse-address 0x08000000:force:mass-erase:leave -d 0483:df11\n```\n\nCreate `/etc/network/interfaces.d/can0`:\n\n```\nallow-hotplug can0\niface can0 can static\n    bitrate 1000000\n    up ifconfig $IFACE txqueuelen 128\n```\n\n```sh\nsudo reboot\n~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0\nip -s link show can0\n```\n\n# Katapult (formerly known as CanBoot)\n\n[Katapult](https://github.com/Arksine/katapult) is a bootloader mainly for MCUs that use CAN bus, however it now also supports USB and UART interfaces.\n\nWe will check out the code now ready for use when we flash Klipper to the MCUs in the next section as not all boards will use it.\n\n```sh\ngit clone https://github.com/Arksine/katapult\n```\n\n# Flash Klipper to MCU\n\nFlashing the Klipper firmware to the MCU can be slightly different depending on the type of Micro-controller architecture that the MCU uses.\n\nThe basic firmware flashing steps are as follows:\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig\nmake\n```\n\nHowever, as I have many different controllers I have opted to use the `KCONFIG_CONFIG` method of configuring allowing me to save the multiple configs so they can be easily reused when I need to update the firmware.\n\nYou can find the configs used in the sections below in my [Klipper Config Firmware Repository](https://github.com/mikepthomas/klipper_config/tree/main/Firmware).\n\n## Anet A8\n\nThis is the board that originally came with [my first 3D printer](printer).\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.anet_a8\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (Atmega AVR)  --->\n    Processor model (atmega1284p)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config, Build and Flash to the board:\n\n```sh\ncp config.anet_a8 ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.anet_a8 -j4\navrdude -p atmega1284p -c arduino -b 57600 -P /dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0 -U out/klipper.elf.hex\n```\n\n## Arduino Mega\n\nUsed by [RAMPS Shield](https://reprap.org/wiki/RAMPS_1.6).\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.arduino_mega\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (Atmega AVR)  --->\n    Processor model (atmega2560)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config, Build and Flash to the board:\n\n```sh\ncp config.arduino_mega ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.arduino_mega -j4\nmake KCONFIG_CONFIG=config.arduino_mega flash FLASH_DEVICE=/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0\n```\n\n## Arduino Uno\n\nUsed by [Arduino CNC Shield](https://all3dp.com/2/arduino-cnc-shield/).\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.arduino_uno\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (Atmega AVR)  --->\n    Processor model (atmega328p)  --->\n    Optional features (to reduce code size)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nAs the firmware is too large to fit in the supplied flash, we also need to disable some features:\n\n```\n(Top) → Optional features (to reduce code size)\n                         Klipper Firmware Configuration\n[*] Support micro-controller based ADC (analog to digital)\n[ ] Support communicating with external chips via SPI bus\n[ ] Support communicating with external chips via I2C bus\n[*] Support hardware PWM (pulse width modulation)\n[*] Support GPIO based button reading\n[ ] Support Trinamic stepper motor driver UART communication\n[ ] Support 'neopixel' type LED control\n[ ] Support measuring fan tachometer GPIO pins\n    *** LCD chips ***\n[*] Support ST7920 LCD display\n[*] Support HD44780 LCD display\n    *** External ADC type chips ***\n[ ] Support HX711 and HX717 ADC chips\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config, Build and Flash to the board:\n\n```sh\ncp config.arduino_uno ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.arduino_uno -j4\nmake KCONFIG_CONFIG=config.arduino_uno flash FLASH_DEVICE=/dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0\n```\n\n## Easy BRD\n\nGet the most up to date info on the [official page](https://github.com/Tircown/ERCF-easy-brd).\n\nThis board will be used for the [6 channel Enraged Rabbit Carrot Feeder V1.1](enraged-rabbit-carrot-feeder-1.1).\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.easy_brd\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (SAMC21/SAMD21/SAMD51/SAME5x)  --->\n    Processor model (SAMD21G18)  --->\n    Bootloader offset (8KiB bootloader)  --->\n    Clock Reference (Internal clock)  --->\n    Communication interface (USB)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config, Build and Flash to the board:\n\n```sh\ncp config.easy_brd ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.easy_brd -j4\nsudo apt install bossa-cli\nsudo bossac -i -d -p /dev/ttyACM0 -e -w -v -R --offset=0x2000 out/klipper.bin\n```\n\n## EBB SB2240 CAN V1.0\n\nGet the most up to date info on the [official page](https://github.com/bigtreetech/docs/blob/master/docs/EBB%202240%202209%20CAN.md).\n\nThis board will be used for the [Stealthburner](voron-stealthburner) on the [Voron 2.4](printer-voron-2.4) when I upgrade to CAN.\n\n### Katapult Configuration\n\n#### CAN Bus\n\n```sh\ncd ~/katapult/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.sb2240_can_katapult\ncp config.sb2240_can_katapult ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.sb2240_can_katapult -j4\nsudo dfu-util -a 0 -d 0483:df11 -s 0x08000000:mass-erase:force -D ~/katapult/out/katapult.bin\n```\n\n```\n(Top)\n                         Katapult Configuration\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Build Katapult deployment application (Do not build)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (CAN bus (on PB0/PB1))  --->\n    Application start offset (8KiB offset)  --->\n(1000000) CAN bus speed\n()  GPIO pins to set on bootloader entry\n[*] Support bootloader entry on rapid double click of reset button\n[ ] Enable bootloader entry on button (or gpio) state\n[*] Enable Status LED\n(PA13)  Status LED GPIO Pin\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n#### USB\n\n```sh\ncd ~/katapult/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.sb2240_katapult\ncp config.sb2240_katapult ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.sb2240_katapult -j4\nsudo dfu-util -a 0 -d 0483:df11 -s 0x08000000:mass-erase:force -D ~/katapult/out/katapult.bin\n```\n\n```\n(Top)\n                         Katapult Configuration\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Build Katapult deployment application (Do not build)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    Application start offset (8KiB offset)  --->\n    USB ids  --->\n()  GPIO pins to set on bootloader entry\n[*] Support bootloader entry on rapid double click of reset button\n[ ] Enable bootloader entry on button (or gpio) state\n[*] Enable Status LED\n(PA13)  Status LED GPIO Pin\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n### Klipper Firmware Configuration\n\n#### CAN Bus\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.sb2240_can_klipper\ncp config.sb2240_can_klipper ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.sb2240_can_klipper -j4\nmake KCONFIG_CONFIG=config.sb2240_can_klipper flash FLASH_DEVICE=1209:beba\n```\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Bootloader offset (8KiB bootloader)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (CAN bus (on PB0/PB1))  --->\n(1000000) CAN bus speed\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.sb2240_klipper\ncp config.sb2240_klipper ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.sb2240_klipper -j4\nmake KCONFIG_CONFIG=config.sb2240_klipper flash FLASH_DEVICE=/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2C0048000950425539393020-if00\n```\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Bootloader offset (8KiB bootloader)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    USB ids  --->\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n## EBB36 V1.0\n\nGet the most up to date info on the [official page](<https://github.com/bigtreetech/EBB/tree/master/EBB%20CAN%20V1.0%20(STM32F072)/EBB36%20CAN%20V1.0>).\n\n### Katapult Configuration\n\n#### USB\n\n```sh\ncd ~/katapult/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.ebb36_1.0_katapult\ncp config.ebb36_1.0_katapult ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.ebb36_1.0_katapult -j4\nsudo dfu-util -a 0 -D ~/katapult/out/katapult.bin --dfuse-address 0x08000000:force:mass-erase:leave -d 0483:df11\n```\n\n```\n(Top)\n                         Katapult Configuration\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32F072)  --->\n    Build Katapult deployment application (Do not build)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    Application start offset (8KiB offset)  --->\n    USB ids  --->\n()  GPIO pins to set on bootloader entry\n[*] Support bootloader entry on rapid double click of reset button\n[ ] Enable bootloader entry on button (or gpio) state\n[*] Enable Status LED\n(PA14)  Status LED GPIO Pin\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.ebb36_1.0_klipper\ncp config.ebb36_1.0_klipper ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.ebb36_1.0_klipper -j4\nmake KCONFIG_CONFIG=config.ebb36_1.0_klipper flash FLASH_DEVICE=/dev/serial/by-id/usb-katapult_stm32f072xb_1F003A000857435231343620-if00\n```\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32F072)  --->\n    Bootloader offset (8KiB bootloader)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    USB ids  --->\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n## EBB42 V1.1\n\nGet the most up to date info on the [official page](<https://github.com/bigtreetech/EBB/tree/master/EBB%20CAN%20V1.1%20and%20V1.2%20(STM32G0B1)/EBB42%20CAN%20V1.1%20and%20V1.2>).\n\n### Katapult Configuration\n\n#### USB\n\n```sh\ncd ~/katapult/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.ebb42_1.1_katapult\ncp config.ebb42_1.1_katapult ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.ebb42_1.1_katapult -j4\nsudo dfu-util -a 0 -D ~/katapult/out/katapult.bin --dfuse-address 0x08000000:force:mass-erase:leave -d 0483:df11\n```\n\n```\n(Top)\n                         Katapult Configuration\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Build Katapult deployment application (Do not build)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    Application start offset (8KiB offset)  --->\n    USB ids  --->\n()  GPIO pins to set on bootloader entry\n[*] Support bootloader entry on rapid double click of reset button\n[ ] Enable bootloader entry on button (or gpio) state\n[*] Enable Status LED\n(PA13)  Status LED GPIO Pin\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.ebb42_1.1_klipper\ncp config.ebb42_1.1_klipper ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.ebb42_1.1_klipper -j4\nmake KCONFIG_CONFIG=config.ebb42_1.1_klipper flash FLASH_DEVICE=/dev/serial/by-id/usb-katapult_stm32g0b1xx_42004D001650415833323520-if00\n```\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Bootloader offset (8KiB bootloader)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    USB ids  --->\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n## Klipper Expander\n\nGet the most up to date info on the [official page](https://github.com/VoronDesign/Voron-Hardware/blob/master/Klipper_Expander/Documentation/Setup_and_Flashing_Guide.md).\n\nThis board is used to control fans on the [Voron 1.8](printer-voron-1.8).\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.klipper_expander\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32F042)  --->\n    Bootloader offset (No bootloader)  --->\n    Clock Reference (Internal clock)  --->\n    Communication interface (USB (on PA9/PA10))  --->\n    USB ids  --->\n    Optional features (to reduce code size)  --->\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nAs the firmware is too large to fit in the supplied flash, we also need to disable some features:\n\n```\n(Top) → Optional features (to reduce code size)\n                         Klipper Firmware Configuration\n[*] Support micro-controller based ADC (analog to digital)\n[*] Support communicating with external chips via SPI bus\n[*]     Support software based SPI \"bit-banging\"\n[*] Support communicating with external chips via I2C bus\n[*]     Support software based I2C \"bit-banging\"\n[*] Support GPIO based button reading\n[ ] Support Trinamic stepper motor driver UART communication\n[*] Support 'neopixel' type LED control\n[*] Support measuring fan tachometer GPIO pins\n    *** LCD chips ***\n[*] Support ST7920 LCD display\n[*] Support HD44780 LCD display\n    *** Accelerometer chips ***\n[*] Support adxl accelerometers\n[*] Support lis2dw and lis3dh 3-axis accelerometers\n[*] Support MPU accelerometers\n[*] Support ICM20948 accelerometer\n    *** External ADC type chips ***\n[*] Support thermocouple MAX sensors\n[*] Support HX711 and HX717 ADC chips\n[*] Support ADS 1220 ADC chip\n    *** Other external sensor chips ***\n[ ] Support ldc1612 eddy current sensor\n[ ] Support angle sensors\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nInstall the boot jumper and reset the board to put the board into DFU mode.\n\nBackup config, Build and Flash to the board:\n\n```sh\ncp config.klipper_expander ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.klipper_expander -j4\nmake KCONFIG_CONFIG=config.klipper_expander flash FLASH_DEVICE=0483:df11\n```\n\n## MMB CAN V1.0\n\nGet the most up to date info on the [official page](https://github.com/bigtreetech/MMB).\n\nThis board will be used for the [8 channel Enraged Rabbit Carrot Feeder V2.0](enraged-rabbit-carrot-feeder-2.0).\n\n### Katapult Configuration\n\n#### CAN Bus\n\n```sh\ncd ~/katapult/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.mmb_can_1.0_can_katapult\ncp config.mmb_can_1.0_can_katapult ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.mmb_can_1.0_can_katapult -j4\n```\n\n```\n(Top)\n                         Katapult Configuration\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Build Katapult deployment application (Do not build)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (CAN bus (on PB0/PB1))  --->\n    Application start offset (8KiB offset)  --->\n(1000000) CAN bus speed\n()  GPIO pins to set on bootloader entry\n[*] Support bootloader entry on rapid double click of reset button\n[ ] Enable bootloader entry on button (or gpio) state\n[ ] Enable Status LED\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n#### USB\n\n```sh\ncd ~/katapult/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.mmb_can_1.0_katapult\ncp config.mmb_can_1.0_katapult ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.mmb_can_1.0_katapult -j4\n```\n\n```\n(Top)\n                         Katapult Configuration\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Build Katapult deployment application (Do not build)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    Application start offset (8KiB offset)  --->\n    USB ids  --->\n()  GPIO pins to set on bootloader entry\n[*] Support bootloader entry on rapid double click of reset button\n[ ] Enable bootloader entry on button (or gpio) state\n[ ] Enable Status LED\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n### Klipper Firmware Configuration\n\n#### CAN Bus\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.mmb_can_1.0_can_klipper\ncp config.mmb_can_1.0_can_klipper ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.mmb_can_1.0_can_klipper -j4\n```\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Bootloader offset (8KiB bootloader)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (CAN bus (on PB0/PB1))  --->\n(1000000) CAN bus speed\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.mmb_can_1.0_klipper\ncp config.mmb_can_1.0_klipper ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.mmb_can_1.0_klipper -j4\n```\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32G0B1)  --->\n    Bootloader offset (8KiB bootloader)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    USB ids  --->\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n## Picobilical\n\nGet the most up to date info on the [official page](https://github.com/MotorDynamicsLab/LDO-Picobilical).\n\nThis board will be used for the [Voron 0.2](printer-voron-0.2).\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.picobilical\ncp config.picobilical ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.picobilical -j4\n```\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (Raspberry Pi RP2040/RP235x)  --->\n    Processor model (rp2040)  --->\n    Bootloader offset (No bootloader)  --->\n    Communication Interface (USBSERIAL)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n## PITB V1.0\n\nGet the most up to date info on the [official page](https://github.com/kageurufu/PITB/tree/main/firmware).\n\nThis board will be used for the A/B Motors on the [Voron 2.4](printer-voron-2.4) when I upgrade to CAN.\n\n### Katapult Configuration\n\n#### CAN Bus\n\n```sh\ncd ~/katapult/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.pitb_can_katapult\ncp config.pitb_can_katapult ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.pitb_can_katapult -j4\n```\n\n```\n(Top)\n                         Katapult Configuration\n    Micro-controller Architecture (Raspberry Pi RP2040/RP235x)  --->\n    Processor model (rp2040)  --->\n    Flash chip (W25Q080 with CLKDIV 2)  --->\n    Build Katapult deployment application (Do not build)  --->\n    Communication Interface (CAN bus)  --->\n(14) CAN RX gpio number\n(13) CAN TX gpio number\n(1000000) CAN bus speed\n()  GPIO pins to set on bootloader entry\n[*] Support bootloader entry on rapid double click of reset button\n[ ] Enable bootloader entry on button (or gpio) state\n[*] Enable Status LED\n(gpio15) Status LED GPIO Pin\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n### Klipper Firmware Configuration\n\n#### CAN Bus\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.pitb_can_klipper\ncp config.pitb_can_klipper ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.pitb_can_klipper -j4\n```\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (Raspberry Pi RP2040/RP235x)  --->\n    Processor model (rp2040)  --->\n    Bootloader offset (16KiB bootloader)  --->\n    Communication Interface (CAN bus)  --->\n(14) CAN RX gpio number\n(13) CAN TX gpio number\n(1000000) CAN bus speed\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.pitb_klipper\ncp config.pitb_klipper ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.pitb_klipper -j4\n```\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (Raspberry Pi RP2040/RP235x)  --->\n    Processor model (rp2040)  --->\n    Bootloader offset (No bootloader)  --->\n    Flash chip (W25Q080 with CLKDIV 2)  --->\n    Communication Interface (USBSERIAL)  --->\n    USB ids  --->\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\n#### Flash\n\nHold the `Boot` boot button whilst connecting the MCU to the Raspberry Pi and run:\n\n```sh\nsudo mount /dev/sda1 /mnt\nsudo cp out/klipper.uf2 /mnt\nsudo umount /mnt\n```\n\n## SKR 1.4\n\nGet the most up to date info on the [official page](https://github.com/bigtreetech/BIGTREETECH-SKR-V1.3/tree/master/BTT%20SKR%20V1.4).\n\nThere is also some useful information in the [Voron Design Documentation](https://docs.vorondesign.com/build/software/skr13_klipper.html).\n\nThis board is currently using [Marlin Firmware](https://marlinfw.org/) on my [Anet A8](printer-hardware-upgrades), but will be flashed with klipper when upgrading to the [AM8](printer-am8).\n\n### Klipper Firmware Configuration\n\n#### Serial\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.skr_1.4_serial\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (LPC176x)  --->\n    Processor model (lpc1768 (100 MHz))  --->\n    Bootloader offset (16KiB bootloader)  --->\n    Communication interface (Serial (on UART0 P0.3/P0.2))  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config and Build:\n\n```sh\ncp config.skr_1.4_serial ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.skr_1.4_serial -j4\n```\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.skr_1.4_usb\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (LPC176x)  --->\n    Processor model (lpc1768 (100 MHz))  --->\n    Bootloader offset (16KiB bootloader)  --->\n    Communication interface (USB)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config and Build:\n\n```sh\ncp config.skr_1.4_usb ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.skr_1.4_usb -j4\n```\n\n#### Flash\n\nFor the initial flash we need to copy the file to a micro sd card.\nThe easiest way to do this is to copy `out/klipper.bin` to the klipper config directory:\n\n```sh\ncp out/klipper.bin ../printer_data/config/\n```\n\nYou can then:\n\n1. Download it to your local machine from the Mainsail web interface.\n2. Copy the `klipper.bin` file to the root of the Micro SD card.\n3. Rename `klipper.bin` to `firmware.bin`.\n4. Eject the Micro SD card from the PC.\n5. Disconnect the power to the MCU.\n6. Insert the Micro SD card into the slot on the MCU.\n7. Power on the MCU.\n8. Check the firmware has flashed, file on the SD card will change to `firmware.cur`, if succesful.\n\n> [!IMPORTANT]\n> If the file is not named `firmware.bin`, the firmware will not be updated.\n\nSubsequent flashes can then be done by using the following commands:\n\n```sh\nsudo service klipper stop\n~/klipper/scripts/flash-sdcard.sh /dev/serial/by-id/usb-Klipper_lpc1769_1C10011425813AAFCED76B5CC22000F5-if00 btt-skr-v1.3\nsudo service klipper start\n```\n\n## SKR 1.4 Turbo\n\nGet the most up to date info on the [official page](https://github.com/bigtreetech/BIGTREETECH-SKR-V1.3/tree/master/BTT%20SKR%20V1.4).\n\nThere is also some useful information in the [Voron Design Documentation](https://docs.vorondesign.com/build/software/skr13_klipper.html).\n\nThis board is being used by the [Voron 1.8](printer-voron-1.8).\n\n### Klipper Firmware Configuration\n\n#### Serial\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.skr_1.4_turbo_serial\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (LPC176x)  --->\n    Processor model (lpc1769 (120 MHz))  --->\n    Bootloader offset (16KiB bootloader)  --->\n    Communication interface (Serial (on UART0 P0.3/P0.2))  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config and Build:\n\n```sh\ncp config.skr_1.4_turbo_serial ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.skr_1.4_turbo_serial -j4\n```\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.skr_1.4_turbo_usb\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (LPC176x)  --->\n    Processor model (lpc1769 (120 MHz))  --->\n    Bootloader offset (16KiB bootloader)  --->\n    Communication interface (USB)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config and Build:\n\n```sh\ncp config.skr_1.4_turbo_usb ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.skr_1.4_turbo_usb -j4\n```\n\n#### Flash\n\nFor the initial flash we need to copy the file to a micro sd card.\nThe easiest way to do this is to copy `out/klipper.bin` to the klipper config directory:\n\n```sh\ncp out/klipper.bin ../printer_data/config/\n```\n\nYou can then:\n\n1. Download it to your local machine from the Mainsail web interface.\n2. Copy the `klipper.bin` file to the root of the Micro SD card.\n3. Rename `klipper.bin` to `firmware.bin`.\n4. Eject the Micro SD card from the PC.\n5. Disconnect the power to the MCU.\n6. Insert the Micro SD card into the slot on the MCU.\n7. Power on the MCU.\n8. Check the firmware has flashed, file on the SD card will change to `firmware.cur`, if succesful.\n\n> [!IMPORTANT]\n> If the file is not named `firmware.bin`, the firmware will not be updated.\n\nSubsequent flashes can then be done by using the following commands:\n\n```sh\nsudo service klipper stop\n~/klipper/scripts/flash-sdcard.sh /dev/serial/by-id/usb-Klipper_lpc1769_1C10011425813AAFCED76B5CC22000F5-if00 btt-skr-v1.3\nsudo service klipper start\n```\n\n## SKR Mini E3 V2.0\n\nGet the most up to date info on the [official page](https://github.com/bigtreetech/BIGTREETECH-SKR-mini-E3/tree/master/hardware/BTT%20SKR%20MINI%20E3%20V2.0/Hardware).\n\nThere is also some useful information in the [Voron Design Documentation](https://docs.vorondesign.com/build/software/miniE3_v20_klipper.html).\n\nThis board will be used in the [Rook 2020](printer-rook).\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.skr_mini_e3\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32F103)  --->\n[ ] Only 10KiB of RAM (for rare stm32f103x6 variant)\n[ ] Disable SWD at startup (for GigaDevice stm32f103 clones)\n    Bootloader offset (28KiB bootloader)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    USB ids  --->\n[*] Optimize stepper code for 'step on both edges'\n(!PA14) GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config and Build:\n\n```sh\ncp config.skr_mini_e3 ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.skr_mini_e3 -j4\n```\n\nFor the initial flash we need to copy the file to a micro sd card.\nThe easiest way to do this is to copy `out/klipper.bin` to the klipper config directory:\n\n```sh\ncp out/klipper.bin ../printer_data/config/\n```\n\nYou can then:\n\n1. Download it to your local machine from the Mainsail web interface.\n2. Copy the `klipper.bin` file to the root of the Micro SD card.\n3. Rename `klipper.bin` to `firmware.bin`.\n4. Eject the Micro SD card from the PC.\n5. Disconnect the power to the MCU.\n6. Insert the Micro SD card into the slot on the MCU.\n7. Power on the MCU.\n8. Check the firmware has flashed, file on the SD card will change to `firmware.cur`, if succesful.\n\n> [!IMPORTANT]\n> If the file is not named `firmware.bin`, the firmware will not be updated.\n\nSubsequent flashes can then be done by using the following commands:\n\n```sh\nsudo service klipper stop\n~/klipper/scripts/flash-sdcard.sh /dev/serial/by-id/usb-Klipper_stm32f103xe_1C10011425813AAFCED76B5CC22000F5-if00 btt-skr-mini-e3-v2\nsudo service klipper start\n```\n\n## SKR Pico\n\nGet the most up to date info on the [official page](https://github.com/bigtreetech/SKR-Pico).\n\nThere is also some useful information in the [Voron Design Documentation](https://docs.vorondesign.com/build/software/skrPico_klipper.html).\n\nThis board will be used for the [Voron 0.2](printer-voron-0.2).\n\n### Klipper Firmware Configuration\n\n#### CAN\n\nYou will need a `CAN Transceiver Module` for this, I used [this SN65HVD230 Module](https://www.aliexpress.com/item/1005002843325046.html) connected to the `Raspberry Pi Serial Port`.\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.skr_pico_can\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (Raspberry Pi RP2040/RP235x)  --->\n    Processor model (rp2040)  --->\n    Bootloader offset (No bootloader)  --->\n    Flash chip (W25Q080 with CLKDIV 2)  --->\n    Communication Interface (USB to CAN bus bridge)  --->\n(1) CAN RX gpio number\n(0) CAN TX gpio number\n    USB ids  --->\n(500000) CAN bus speed\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config and Build:\n\n```sh\ncp config.skr_pico_can ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.skr_pico_can -j4\n```\n\n#### Serial\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.skr_pico_serial\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (Raspberry Pi RP2040/RP235x)  --->\n    Processor model (rp2040)  --->\n    Bootloader offset (No bootloader)  --->\n    Communication Interface (UART0 on GPIO0/GPIO1)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config and Build:\n\n```sh\ncp config.skr_pico_serial ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.skr_pico_serial -j4\n```\n\n#### USB\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.skr_pico_usb\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (Raspberry Pi RP2040/RP235x)  --->\n    Processor model (rp2040)  --->\n    Bootloader offset (No bootloader)  --->\n    Communication Interface (USBSERIAL)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config and Build:\n\n```sh\ncp config.skr_pico_usb ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.skr_pico_usb -j4\n```\n\n#### Flash\n\nFor the initial flash we need to install jumpers on the `USB Power` and `Boot` pins, connect the MCU to the Raspberry Pi and run:\n\n```sh\nsudo mount /dev/sda1 /mnt\nsudo cp out/klipper.uf2 /mnt\nsudo umount /mnt\n```\n\nDisconnect power from the MCU and remove the jumpers we installed earlier.\n\nSubsequent flashes can then be done by using the following commands:\n\n```sh\nsudo service klipper stop\ncd ~/klipper\nmake flash FLASH_DEVICE=/dev/serial/by-id/usb-Klipper_rp2040_1D0004001050563046363120-if00\nsudo service klipper start\n```\n\n## Super8\n\nGet the most up to date info on the [official page](https://mellow-3d.github.io/fly_super8.html).\n\nThis board will be used for the [Voron 2.4](printer-voron-2.4).\n\n### Katapult Configuration\n\n#### USB\n\n```sh\ncd ~/katapult/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.super8_katapult\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Katapult Configuration\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32F407)  --->\n    Build Katapult deployment application (32KiB bootloader)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    Application start offset (32KiB offset)  --->\n    USB ids  --->\n()  GPIO pins to set on bootloader entry\n[*] Support bootloader entry on rapid double click of reset button\n[ ] Enable bootloader entry on button (or gpio) state\n[ ] Enable Status LED\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config and Build:\n\n```sh\ncp config.super8_katapult ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.super8_katapult -j4\n```\n\nFor the initial flash we need to copy the file to a micro sd card.\nThe easiest way to do this is to copy `out/deployer.bin` to the klipper config directory:\n\n```sh\ncp out/deployer.bin ../printer_data/config/\n```\n\nYou can then:\n\n1. Download it to your local machine from the Mainsail web interface.\n2. Copy the `deployer.bin` file to the root of the Micro SD card.\n3. Rename `deployer.bin` to `firmware.bin`.\n4. Eject the Micro SD card from the PC.\n5. Insert the Micro SD card into the slot on the MCU.\n6. Press the `RESET` button on the MCU.\n\nSubsequent flashes can then be done by double pressing the `RESET` button on the MCU and then using the command:\n\n```sh\npython3 ~/katapult/scripts/flashtool.py -f ~/katapult/out/deployer.bin -d /dev/serial/by-id/usb-katapult_stm32f407xx_5A0034000250304235323120-if00\n```\n\n### Klipper Firmware Configuration\n\n#### USB\n\n```sh\ncd ../klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.super8_klipper\n```\n\nSet the following configuration:\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[*] Enable extra low-level configuration options\n    Micro-controller Architecture (STMicroelectronics STM32)  --->\n    Processor model (STM32F407)  --->\n    Bootloader offset (32KiB bootloader)  --->\n    Clock Reference (8 MHz crystal)  --->\n    Communication interface (USB (on PA11/PA12))  --->\n    USB ids  --->\n[*] Optimize stepper code for 'step on both edges'\n()  GPIO pins to set at micro-controller startup\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nBackup config, Build and Flash to the board:\n\n```sh\ncp config.super8_klipper ../printer_data/config/Firmware/\nmake KCONFIG_CONFIG=config.super8_klipper -j4\nmake KCONFIG_CONFIG=config.super8_klipper flash FLASH_DEVICE=/dev/serial/by-id/usb-katapult_stm32f407xx_5A0034000250304235323120-if00\n```\n\n# RPi microcontroller\n\nTo get the most up-to-date info for the latest Klipper version visit the [Klipper RPi micro-controller setup guide](https://www.klipper3d.org/RPi_microcontroller.html).\n\n## Install the RC Script\n\nCopy and enable the `klipper-mcu.service` for systemd:\n\n```sh\ncd ~/klipper/\nsudo cp ./scripts/klipper-mcu.service /etc/systemd/system/\nsudo systemctl enable klipper-mcu.service\n```\n\n## Building the Micro-Controller Code\n\nConfigure the Klipper micro-controller code:\n\n```sh\ncd ~/klipper/\nmake clean\nmake menuconfig KCONFIG_CONFIG=config.rpi\ncp config.rpi ../printer_data/config/Firmware/\n```\n\nSet `Micro-controller Architecture` to `Linux process`...\n\n```\n(Top)\n                         Klipper Firmware Configuration\n[ ] Enable extra low-level configuration options\n    Micro-controller Architecture (Linux process)  --->\n[Space/Enter] Toggle/enter      [?] Help            [/] Search\n[Q] Quit (prompts for save)     [ESC] Leave menu\n```\n\nthen save and exit and run:\n\n```sh\nsudo service klipper stop\nmake flash KCONFIG_CONFIG=config.rpi\nsudo service klipper start\n```\n\nIf klippy.log reports a `Permission denied` error when attempting to connect to `/tmp/klipper_host_mcu` then you need to add your user to the tty group. The following command will add the `pi` user to the `tty` group:\n\n```sh\nsudo usermod -a -G tty pi\n```\n\n## Optional: Interface Options\n\nYou can find the `Interface Options` in the Raspberry Pi Software Configuration Tool by running:\n\n```sh\nsudo raspi-config\n```\n\n```\n┌─────────┤ Raspberry Pi Software Configuration Tool (raspi-config) ├──────────┐\n│                                                                              │\n│       1 System Options       Configure system settings                       │\n│       2 Display Options      Configure display settings                      │\n│      |3 Interface Options    Configure connections to peripherals     |      │\n│       4 Performance Options  Configure performance settings                  │\n│       5 Localisation Options Configure language and regional settings        │\n│       6 Advanced Options     Configure advanced settings                     │\n│       8 Update               Update this tool to the latest version          │\n│       9 About raspi-config   Information about this configuration tool       │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                     <Select>                     <Finish>                    │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n```\n\n### Enabling SPI\n\nSPI should be enabled automatically by the hat EEPROM, If you have trouble, you can enable it manually by selecting `SPI` under the `Interface Options` menu.\n\n```\n┌─────────┤ Raspberry Pi Software Configuration Tool (raspi-config) ├──────────┐\n│                                                                              │\n│    I1 SSH         Enable/disable remote command line access using SSH        │\n│    I2 RPi Connect Enable/disable Raspberry Pi Connect                        │\n│    I3 VNC         Enable/disable graphical remote desktop access             │\n│   |I4 SPI         Enable/disable automatic loading of SPI kernel module |    │\n│    I5 I2C         Enable/disable automatic loading of I2C kernel module      │\n│    I6 Serial Port Enable/disable shell messages on the serial connection     │\n│    I7 1-Wire      Enable/disable one-wire interface                          │\n│    I8 Remote GPIO Enable/disable remote access to GPIO pins                  │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                     <Select>                     <Back>                      │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n```\n\n### Enabling I2C\n\nI2C should be enabled automatically by the hat EEPROM, If you have trouble, you can enable it manually by selecting `I2C` under the `Interface Options` menu.\n\n```\n┌─────────┤ Raspberry Pi Software Configuration Tool (raspi-config) ├──────────┐\n│                                                                              │\n│    I1 SSH         Enable/disable remote command line access using SSH        │\n│    I2 RPi Connect Enable/disable Raspberry Pi Connect                        │\n│    I3 VNC         Enable/disable graphical remote desktop access             │\n│    I4 SPI         Enable/disable automatic loading of SPI kernel module      │\n│   |I5 I2C         Enable/disable automatic loading of I2C kernel module |    │\n│    I6 Serial Port Enable/disable shell messages on the serial connection     │\n│    I7 1-Wire      Enable/disable one-wire interface                          │\n│    I8 Remote GPIO Enable/disable remote access to GPIO pins                  │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                     <Select>                     <Back>                      │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n```\n\nIf planning to use I2C for the MPU accelerometer, it is also required to set the baud rate to 400000 by: adding/uncommenting `dtparam=i2c_arm=on,i2c_arm_baudrate=400000` in `/boot/config.txt` (or `/boot/firmware/config.txt` in some distros).\nThis should also be automatically be enabled by the hat EEPROM however you can do it manually if you have any problems.\n\n### Enabling 1-wire\n\nIf you require, you can enable the 1-wire interface by selecting `1-Wire` under the `Interface Options` menu.\n\n```\n┌─────────┤ Raspberry Pi Software Configuration Tool (raspi-config) ├──────────┐\n│                                                                              │\n│    I1 SSH         Enable/disable remote command line access using SSH        │\n│    I2 RPi Connect Enable/disable Raspberry Pi Connect                        │\n│    I3 VNC         Enable/disable graphical remote desktop access             │\n│    I4 SPI         Enable/disable automatic loading of SPI kernel module      │\n│    I5 I2C         Enable/disable automatic loading of I2C kernel module      │\n│    I6 Serial Port Enable/disable shell messages on the serial connection     │\n│   |I7 1-Wire      Enable/disable one-wire interface                     |    │\n│    I8 Remote GPIO Enable/disable remote access to GPIO pins                  │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                                                                              │\n│                     <Select>                     <Back>                      │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n```\n\nyou can then find any conneted sensors serial numbers with: `ls /sys/bus/w1/devices/`\n\n## Optional: Identify the correct gpiochip\n\nTo install the Linux GPIO character device:\n\n```sh\nsudo apt install gpiod\n```\n\nTo check available gpiochip run:\n\n```sh\ngpiodetect\n```\n\nTo check the pin number and the pin availability run:\n\n```sh\ngpioinfo\n```\n\n## Optional: Hardware PWM\n\nRaspberry Pi's have two PWM channels (PWM0 and PWM1) which are exposed on the header or if not, can be routed to existing gpio pins. The Linux mcu daemon uses the pwmchip sysfs interface to control hardware pwm devices on Linux hosts. The pwm sysfs interface is not exposed by default on a Raspberry and can be activated by adding a line to `/boot/config.txt`:\n\n```ini\n# Enable pwmchip sysfs interface\ndtoverlay=pwm,pin=12,func=4\n```\n\nThis example enables only PWM0 and routes it to gpio12. If both PWM channels need to be enabled you can use `pwm-2chan`:\n\n```ini\n# Enable pwmchip sysfs interface\ndtoverlay=pwm-2chan,pin=12,pin2=13,func=4,func2=4\n```\n\nThe overlay does not expose the pwm line on sysfs on boot and needs to be exported by echo'ing the number of the pwm channel to `/sys/class/pwm/pwmchip0/export`:\n\n```sh\n# Enable pwmchip sysfs interface\necho 0 > /sys/class/pwm/pwmchip0/export\n```\n\nIf you have enabled `pwm-2chan` you can enable PWM1 too with:\n\n```sh\n# Enable pwmchip sysfs interface\necho 0 > /sys/class/pwm/pwmchip0/export\necho 1 > /sys/class/pwm/pwmchip0/export\n```\n\nThis will create device `/sys/class/pwm/pwmchip0/pwm0` and optionally `/sys/class/pwm/pwmchip0/pwm1` in the filesystem. The easiest way to do this is by adding them to `/etc/rc.local` before the `exit 0` line.\n\nWith the sysfs in place, you can now use either the pwm channel(s) by adding the following piece of configuration to your board's config file:\n\n```ini\n[fan_generic fan1]\npin=rpi:pwmchip0/pwm0\npwm=True\nhardware_pwm=True\ncycle_time=0.000001\n```\n\nThis will add hardware pwm control to gpio12 on the Pi (because the overlay was configured to route pwm0 to pin=12).\n\nPWM0 can be routed to gpio12 and gpio18, PWM1 can be routed to gpio13 and gpio19:\n\n| PWM | gpio PIN | Func |\n| --- | -------- | ---- |\n| 0   | 12       | 4    |\n| 0   | 18       | 2    |\n| 1   | 13       | 4    |\n| 1   | 19       | 2    |\n\n# Create Flash MCU Convenience Script\n\n```sh\nnano flash-mcu.sh\nchmod +x flash-mcu.sh\n./flash-mcu.sh\n```\n\nExample:\n\n```sh\ncd ~/klipper/\nmake clean\nread -p \"Press Enter to configure RPI MCU\" </dev/tty\nmake menuconfig KCONFIG_CONFIG=config.rpi\ncp config.rpi ../printer_data/config/Firmware/\necho \"Flashing RPI MCU\"\nsudo service klipper stop\nmake flash KCONFIG_CONFIG=config.rpi\nsudo service klipper start\n```\n\n# Resonance Compensation\n\nGet the most up to date info on the [official page](https://www.klipper3d.org/Measuring_Resonances.html)\n\n```sh\nsudo apt update\nsudo apt install python3-numpy python3-matplotlib libatlas-base-dev libopenblas-dev\n~/klippy-env/bin/pip install -v \"numpy<1.26\"\n```\n\nThen check no errors from the command:\n\n```sh\n~/klippy-env/bin/python -c 'import numpy;'\n```\n\n# Setup Crowsnest\n\nGet the most up to date info on the [official page](https://crowsnest.mainsail.xyz/configuration/cam-section).\n\n# Fix for RepRapDiscount 128x64 Full Graphic Smart Controller\n\nMy Full Graphic Smart Controller Display is showing the same issue as described in the GitHub issue [RepRap Display doesn't work properly](https://github.com/Klipper3d/klipper/issues/5089)\n\n```sh\ncd ~/klipper/src/\nmv lcd_st7920.c lcd_st7920.c.bak\nwget https://github.com/Stout69/For-Klipper/raw/main/lcd_st7920.c\ncd ../klippy/extras/display/\nmv st7920.py st7920.py.bak\nwget https://github.com/Stout69/For-Klipper/raw/main/st7920.py\n```\n\nThen recompile klipper for the MCU (See above)\n\n> [!WARNING]\n> I have retried these steps recently, however the problem in the GitHub issue still persists.\n>\n> Since Klipper no longer uses GitHub issues for it's issue tracker, [I have created a post in config-support Channel on Discord](https://discord.com/channels/431557959978450984/1412458895254749366/1412458895254749366).\n\n# KlipperScreen Fix\n\nWhen installing KlipperScreen via kiauh you may get [Cannot open virtual Console](https://klipperscreen.readthedocs.io/en/latest/Troubleshooting/VC_ERROR/) error in the log:\n\n```\nxf86OpenConsole: Cannot open virtual console 2 (Permission denied)\n```\n\nTo fix this run the following:\n\n```sh\ncat /etc/X11/Xwrapper.config\n```\n\nThis should have the line `allowed_users=anybody` in it.\n\nNext run:\n\n```sh\ncat /etc/group | grep tty\n```\n\nIf your username is not listed under that line, you need to add it with the following command:\n\n```sh\nusermod -a -G tty $USER\n```\n\nAdd `needs_root_rights=yes` to `/etc/X11/Xwrapper.config`:\n\n```sh\nsudo bash -c \"echo needs_root_rights=yes>>/etc/X11/Xwrapper.config\"\nsudo service KlipperScreen restart\nsystemctl status KlipperScreen\n```\n","lastmod":"2025-09-04T21:19:32.286Z"},"related":[{"slug":"printer-voron-0.2","related":[],"external":[],"title":"Voron 0.2","heading":"","date":"","preview":"/assets/blog/printer-voron-0.2/voron-0.2-hero.jpg","author":{"name":"","picture":""},"description":"","tags":[],"categories":[],"keywords":[],"promoted":false,"content":""},{"slug":"printer-voron-1.8","related":[],"external":[],"title":"Voron 1.8","heading":"","date":"","preview":"/assets/blog/printer-voron-1.8/voron-hero.jpg","author":{"name":"","picture":""},"description":"","tags":[],"categories":[],"keywords":[],"promoted":false,"content":""},{"slug":"printer-voron-2.4","related":[],"external":[],"title":"Voron 2.4","heading":"","date":"","preview":"/assets/blog/printer-voron-2.4/voron-hero.jpg","author":{"name":"","picture":""},"description":"","tags":[],"categories":[],"keywords":[],"promoted":false,"content":""},{"slug":"printer-am8","related":[],"external":[],"title":"AM8 Switchwire","heading":"","date":"","preview":"/assets/blog/printer-am8/printer-am8-hero.jpg","author":{"name":"","picture":""},"description":"","tags":[],"categories":[],"keywords":[],"promoted":false,"content":""},{"slug":"single-board-computers","related":[],"external":[],"title":"Single Board Computers","heading":"","date":"","preview":"/assets/blog/single-board-computers/single-board-computers-hero.jpg","author":{"name":"","picture":""},"description":"","tags":[],"categories":[],"keywords":[],"promoted":false,"content":""}]},"__N_SSG":true}